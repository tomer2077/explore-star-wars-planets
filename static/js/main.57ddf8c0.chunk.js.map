{"version":3,"sources":["Planet.js","App.js","serviceWorker.js","index.js"],"names":["Planet","currentPlanet","name","className","id","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","App","state","planet","randomNum","Math","floor","random","url","fetch","response","json","data","this","setState","console","log","event","planetData","planetDataArray","Object","entries","length","onClick","wow","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAqDeA,G,YAlDA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACb,OACI,kBAAC,WAAD,KACA,8BAII,4BAAKA,EAAcC,MACvB,yBAAKC,UAAU,iBACf,+BACI,+BACA,4BACI,wBAAIC,GAAG,YAAP,mBACA,4BAAKH,EAAcI,kBAEvB,4BACI,wBAAID,GAAG,SAAP,kBACA,4BAAKH,EAAcK,iBAEvB,4BACI,wBAAIF,GAAG,YAAP,YACA,4BAAKH,EAAcM,WAEvB,4BACI,wBAAIH,GAAG,WAAP,WACA,4BAAKH,EAAcO,UAEvB,4BACI,wBAAIJ,GAAG,UAAUD,UAAU,QAA3B,WACA,4BAAKF,EAAcQ,UAEvB,4BACI,wBAAIL,GAAG,WAAP,WACA,4BAAKH,EAAcS,UAEvB,4BACI,wBAAIN,GAAG,SAAP,iBACA,4BAAKH,EAAcU,gBAEvB,4BACI,wBAAIP,GAAG,cAAP,cACA,4BAAKH,EAAcW,mBCkBpBC,E,YAzDd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZC,OAAQ,IAHI,E,sKAQPC,EAAYC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAChDC,EAAM,+BAAiCJ,E,4BAGnBK,MAAMD,I,cAAvBE,E,0BACaA,EAASC,Q,OAAtBC,E,OACNC,KAAKC,SAAS,CAACX,OAAQS,IACvBG,QAAQC,IAAIH,KAAKX,MAAMC,Q,kDAEvBY,QAAQC,IAAI,YAAZ,M,qFAIUC,G,qFACLb,EAAYC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAChDC,EAAM,+BAAiCJ,E,4BAGnBK,MAAMD,I,cAAvBE,E,0BACaA,EAASC,Q,OAAtBC,E,OACNC,KAAKC,SAAS,CAACX,OAAQS,IACvBG,QAAQC,IAAIH,KAAKX,MAAMC,Q,kDAEvBY,QAAQC,IAAI,YAAZ,M,0FAGQ,IAAD,OACFE,EAAaL,KAAKX,MAAMC,OACxBgB,EAAkBC,OAAOC,QAAQH,GACvC,OAAgC,KAA3BC,EAAgBG,OAAuB,oCACpCH,EAAgBG,OAKvB,kBAAC,WAAD,KACA,4BAAQ/B,UAAU,MACjB,wBAAIC,GAAG,SAAP,qCAGD,8BACA,4BAAQD,UAAU,eAAegC,QAAS,kBAAM,EAAKC,QAArD,iBACC,kBAAC,EAAD,CAAQnC,cAAe6B,MAVxB,2C,GAzCeO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.57ddf8c0.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './Planet.css'\r\n\r\nconst Planet = ({currentPlanet}) => {\r\n    return (\r\n        <Fragment>\r\n        <nav>\r\n        {/* <button className=\"button-three\" onClick={this.wow}>Random Planet</button> */}\r\n\r\n\t\t\t</nav>\r\n            <h1>{currentPlanet.name}</h1>\r\n        <div className=\"table-wrapper\">\r\n        <table>\r\n            <tbody>\r\n            <tr>\r\n                <td id='rotation'>Rotation Period</td>\r\n                <td>{currentPlanet.rotation_period}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='orbit'>Orbital Period</td>\r\n                <td>{currentPlanet.orbital_period}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='diameter'>Diameter</td>\r\n                <td>{currentPlanet.diameter}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='climate'>Climate</td>\r\n                <td>{currentPlanet.climate}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='gravity' className='icon'>Gravity</td>\r\n                <td>{currentPlanet.gravity}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='terrain'>Terrain</td>\r\n                <td>{currentPlanet.terrain}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='water'>Surface Water</td>\r\n                <td>{currentPlanet.surface_water}</td>\r\n            </tr>\r\n            <tr>\r\n                <td id='population'>Population</td>\r\n                <td>{currentPlanet.population}</td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Planet;","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport Planet from './Planet';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tplanet: {}\r\n\t\t}\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst randomNum = Math.floor(Math.random() * 100) + 1;\r\n\t\tlet url = 'http://swapi.co/api/planets/' + randomNum;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url);\r\n\t\t\tconst data = await response.json();\r\n\t\t\tthis.setState({planet: data});\r\n\t\t\tconsole.log(this.state.planet);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('ooooooops', err);\r\n\t\t}\r\n \t }\r\n\t  \r\n\t  async wow(event) {\r\n\t\tconst randomNum = Math.floor(Math.random() * 100) + 1;\r\n\t\tlet url = 'http://swapi.co/api/planets/' + randomNum;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url);\r\n\t\t\tconst data = await response.json();\r\n\t\t\tthis.setState({planet: data});\r\n\t\t\tconsole.log(this.state.planet);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('ooooooops', err);\r\n\t\t}\r\n\t  }\r\n\trender() {\r\n\t\tconst planetData = this.state.planet;\r\n\t\tconst planetDataArray = Object.entries(planetData);\r\n\t\tif (!planetDataArray.length === 2) { return <h1>oops</h1>}\r\n\t\treturn !planetDataArray.length ?\r\n\t\t\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\r\n\t\t\t<Fragment>\r\n\t\t\t<header className='tc'>\r\n\t\t\t\t<h1 id=\"title\">Explore The Planets of Star Wars</h1>\r\n\t\t\t</header>\r\n\t\t\t\r\n\t\t\t<main>\r\n\t\t\t<button className=\"button-three\" onClick={() => this.wow()}>Random Planet</button>\r\n\t\t\t\t<Planet currentPlanet={planetData} />\r\n\t\t\t</main>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t\t}\r\n\t}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}